1.1.חתול סיאמי יורש מחתול
בולדוג יורש מכלב
חתול, כלב, ציפור יורשים מחיה.
1.2. כן כדאי להפוך את מחלקת חיה לאבסטרקטית משום שלכל החיות יש מאפיינים בסיסיים שנרצה להגדיר מראש.

2.אי אפשר לרשת יותר ממחלקה אחת משום שאם היינו יכולים היה יכול להיווצר לבוא מצב של מעויין, שבו היינו יכולים לרשת שתי פונקציות בעלות אותו שם אך מאבא אחר עם שימושיות שונה ולא היינו יכולים להגדיל ביניהן.

3.כן ניתן לרשת יותר מאינטרפייס אחד

4.לא אי אפשר להצהיר על מתודה אבסטרקטית במחלקה שהיא לא.

5.כן ניתן לכתוב פונקציה לא אבסטרקטית במלחקה שהיא אבסטרקטית

6.כן ניתן

7.לא, באינטרפייס האופציה היחידה היא פאבליק

8.הם כולם מגדירי נגישות

public - פתוח לכולם

private - רק לאותה מחלקה

protected - רק לאותה מחלקה וליורשים שלה

internal - רק לאותו פרויקט

9.חייבים לממש פונקציה וירטואלית אבל לא חייבים לדרוס אותה

10.אם כתבתי מתודה וירטואלית באבא ומימשתי בבן -  זה override 

אם כתבתי שתי פונקציות הזהות בשמותיהם אך שונות בפרמטרים זה  overload 

אם כתבתי שתי פונקציות הזהות בשמותיהם ובפרמטרים אך שונות בטיפוס הערך המוחזר זה
 overload

11.גם וגם

12.לא ולא

13.במחלקה סטטית כל הפונקציות סטטיות ואין לה מופעים
 למחלקה לא סטטית עם פונקציות ומתודות סטטיות יש מופע

14.בנאי סטטי מופעל כאשר קוראים לו מבחוץ וכדאי לכתוב בקוד של בנאי סטטי משהו שנצטרך להתשמש בט רק פעם אחת.

15.public string MyName { get; set; }

16.כדאי להתשמש בפרופרטי כי זה חוסך המון קוד וזאת הדרך הנכונה לתכנת
שימוש בפרופרטי חוסך לנו יצירת פונקציות שיעשו את אותו הדבר.
כן ניתן.

17.מאחורי הקלעים הדוטנט יכין לנו משתנה פרייבט בשם myname
ויעשה בו שימוש מאחורי הקלעים

18. כן ניתן בעזרת ILDASM ו-ILASM


חלק 2 

1.הצופן - 18618181.8181818


